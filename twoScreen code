//aimee
main twoScreen class:
PFont stdFont;  //variable to store font
final int EVENT_BUTTON1 = 1; 
final int EVENT_FORWARD = 2; 
final int EVENT_BUTTON2 = 3; 
final int EVENT_BACKWARD = 4; 
final int EVENT_NULL = 0;

Screen currentScreen, screen1, screen2; //screen objects

void setup() {
  stdFont = createFont("Chalkboard-30", 30);
  textFont(stdFont);

  size(400, 400); //size of screen window

  //creating two screen objects with diff colour background windows
  screen1 = new Screen(color(255)); //add this to main program with PImage instead
  screen2 = new Screen(color(150));
  
  //creating widgets (buttons) for the screens
  Widget widget1 = new Widget(100, 100, 180, 40, "View CO2", color(172, 10, 173), stdFont, EVENT_BUTTON1); 
  Widget widget2 = new Widget(100, 200, 180, 40, "Bar Chart", color(250, 134, 211), stdFont, EVENT_FORWARD); 
  Widget widget3 = new Widget(100, 100, 180, 40, "Bar Chart", color(172, 10, 173), stdFont, EVENT_BUTTON2); 
  Widget widget4 = new Widget(100, 200, 180, 40, "Main Screen", color(250, 134, 211), stdFont, EVENT_BACKWARD);
  
  //adding widgets to screen
  screen1.add(widget1);
  screen1.add(widget2);
  screen2.add(widget3);
  screen2.add(widget4);
  
  currentScreen = screen1; //setting initial screen
}

void draw() {
  currentScreen.draw();
}

void mousePressed() {
  int event = currentScreen.getEvent(mouseX, mouseY); //getting event based on mouse position
  
  //handling diff events based on clicked button
  switch (event) {
    case EVENT_BUTTON1:
      println("button 1!");
      break;
    case EVENT_BUTTON2:
      println("button 2!");
      break;
    case EVENT_FORWARD:
      println("bar chart"); 
      currentScreen = screen2;
      break;
    case EVENT_BACKWARD:
      println("main screen"); 
      currentScreen = screen1;
      break;
    default:
      break;
  }
}

screen class:
class Screen {
  ArrayList screenWidgets; //list that stores widgets
  color screenColor;
  
  Screen(color screenColor){ 
  screenWidgets = new ArrayList(); //initialising the list
  this.screenColor = screenColor;
  }
  
  //method to add widgets to the screen
  void add(Widget w){
    screenWidgets.add(w);
  }
  
void draw(){
background(screenColor);
//looping through widgets and getting each widget, casting from object to widget
for(int i = 0; i<screenWidgets.size(); i++){
Widget aWidget = (Widget)screenWidgets.get(i);
      aWidget.draw();
    }
}

int getEvent(int mx, int my){
  //looping through each element in the screenWidgets arrayList
for(int i = 0; i<screenWidgets.size(); i++){
  //every iteration gets the widget at the index from the arrayList and casts it
  //from type object to type widget
  Widget aWidget = (Widget) screenWidgets.get(i); 
  //calling the getEvent() method on the current widget and passing the mouse co ords through
  int event = aWidget.getEvent(mouseX,mouseY); 
  //returns the event associated with the widget if mouse is in widget bounds
  if(event != EVENT_NULL){
        return event; //mouse is within bounds of widget
      }
}
   return EVENT_NULL;
 }

//getting all widgets on the screen and returning list of widgets
ArrayList getWidgets() {
return screenWidgets; 
}
}

widget class:
class Widget {
int x, y, width, height;
String label;  //widget label
int event;
color widgetColor, labelColor, lineColor; //colors for widget
PFont widgetFont;

//constructor
Widget(int x,int y, int width, int height, String label, color widgetColor, PFont widgetFont, int event){
  this.x=x;
  this.y=y; 
  this.width = width; 
  this.height= height; 
  this.label=label; 
  this.event=event; 
  this.widgetColor=widgetColor; 
  this.widgetFont=widgetFont; 
  labelColor= color(0); 
  lineColor= color(0);
   }
   
void draw(){
  fill(widgetColor); 
  stroke(lineColor); 
  rect(x,y,width,height);
  fill(labelColor);
  text(label, x+10, y+height-10); //drawing label
}

//changes line colour if mouse is over widget
void mouseOver() { 
  lineColor = color(255);
}
void mouseNotOver() {
lineColor = color(0); 
}

//getting event based on mouse position
int getEvent(int mX, int mY){
if(mX>x && mX < x+width && mY >y && mY <y+height){ //if mouse is over widget
        return event;
     }
     return EVENT_NULL;
  }
}
