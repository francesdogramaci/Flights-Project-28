// frances 
// how to call on it in main:
//  queryRender = new QueryRender(queryFlightEmissions, emissions, queryDepartureTimeCounts, table, searchBar);
void drawPieChart() {
   
    

    for (TableRow row : flightsTable.rows()) {
      int actualDeparture = row.getInt("DEP_TIME"); // get the actual departure time from the table
      int scheduledDeparture = row.getInt("CRS_DEP_TIME"); // get the scheduled departure time from the table
      String origin = row.getString("ORIGIN"); // get the origin from the table
      String flDate = row.getString("FL_DATE"); // get the flight date from the table

      // Check if the flight is from the same origin and date as specified in the search inputs
      if (origin.contains(searchBar.inputText) && flDate.contains(searchBar.inputText2)) {
        // Only count the flight if it's a match
        if (actualDeparture >= scheduledDeparture + 5) {
          lateCount++; // increment lateCount if the actual departure is later than scheduled
          print(lateCount);
        } else if (actualDeparture <= scheduledDeparture + 5) {
          earlyCount++; // increment earlyCount if the actual departure is earlier than scheduled
          print(earlyCount);
        } else {
          onTimeCount++; // increment onTimeCount if the actual departure is the same as scheduled
          print(onTimeCount);
        }
      }
    }

 float totalFlights = lateCount + earlyCount + onTimeCount;
    
     if (totalFlights == 0) {
        // Handle the case when there are no flights (totalFlights is zero)
        // For example, you might display a message or skip drawing the pie chart
        println("No flights data available.");
        return; // Exit the method
    }
    
    // Pie Chart Key
    textAlign(LEFT, TOP); //position the key for the pie chart in the top left corner
    fill(0); // make the text black
    textSize(14); // text size
    text("Late", 20, 20);
    text("Early", 20, 40);
    text("On Time", 20, 60);

    // Colored squares
    fill(250, 134, 221); // pink for late flights
    rect(120, 20, 15, 15);//position and size the squares
    fill(162, 41, 132); // purple for early flights
    rect(120, 40, 15, 15);
    fill(94, 8, 131);// light purple for on-time flights
    rect(120, 60, 15, 15);

    // Calculate the proportions of each count relative to the total
    float lateProportion = lateCount / totalFlights;
    float earlyProportion = earlyCount / totalFlights;
    float onTimeProportion = onTimeCount / totalFlights;
    //float onTimeProportion = departureTimeCounts[0] / totalFlights;
    // Calculate the angles for each segment based on their proportions
    float lateAngle = map(lateProportion, 0, 1, 0, TWO_PI); // Angle for late flights
    float earlyAngle = map(earlyProportion, 0, 1, 0, TWO_PI); // Angle for early flights
    float onTimeAngle = map(onTimeProportion, 0, 1, 0, TWO_PI); // Angle for on-time flights
    // 0 = mininmum value of the input range, 1= maximum vakue of the input range, 0= minimum value of the output range
    fill(250, 134, 221); // Draw the late flights section (pink)
    arc(width / 2, height / 2, 300, 300, 0, lateAngle); // starts at 0 ends at the end of late angle

    fill(162, 41, 132); // Draw the early flights section (purple)
    arc(width / 2, height / 2, 300, 300, lateAngle, lateAngle + earlyAngle); // starts at the end of late angle, ends at late angle + early angle

    fill(94, 8, 131); // Draw the on-time flights section (light purple)
    arc(width / 2, height / 2, 300, 300, lateAngle + earlyAngle, lateAngle + earlyAngle + onTimeAngle);
  }
